# People Operation and Management System - Development Environment
# This file sets up the development environment with hot reloading

version: '3.8'

services:
  # Frontend Service (Next.js) - Development
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:4000
      - NEXT_PUBLIC_APP_NAME=People Operation and Management
      - NEXT_PUBLIC_APP_VERSION=1.0.0
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - people-ops-network
    restart: unless-stopped
    command: npm run dev

  # Backend Service (NestJS) - Development
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - '4000:4000'
    environment:
      - NODE_ENV=development
      - PORT=4000
      - HOST=0.0.0.0
      - DATABASE_URL=postgresql://people_ops:ops@1234@postgres:5432/people_ops_dev
      - POSTGRES_DB=people_ops_dev
      - POSTGRES_USER=people_ops
      - POSTGRES_PASSWORD=ops@1234
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=dev_jwt_secret_key_change_in_production
      - JWT_EXPIRES_IN=24h
      - JWT_REFRESH_EXPIRES_IN=7d
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=ops@1234
      - MINIO_SECRET_KEY=ops@1234
      - MINIO_BUCKET_NAME=people-ops-dev-documents
      - MINIO_USE_SSL=false
      - CORS_ORIGIN=http://localhost:3000
      - CORS_CREDENTIALS=true
      - LOG_LEVEL=debug
      - DEBUG=true
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - people-ops-network
    restart: unless-stopped
    command: npm run start:dev

  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_DB=people_ops_dev
      - POSTGRES_USER=people_ops
      - POSTGRES_PASSWORD=ops@1234
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - people-ops-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U people_ops -d people_ops_dev" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - people-ops-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      - MINIO_ROOT_USER=ops@1234
      - MINIO_ROOT_PASSWORD=ops@1234
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - people-ops-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

# Custom network for service communication
networks:
  people-ops-network:
    driver: bridge
